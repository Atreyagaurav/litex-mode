\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename litex-mode.info
@settitle 
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@finalout
@titlepage
@title 
@end titlepage

@contents

@ifnottex
@node Top
@top 
@end ifnottex

@menu
* Li@TeX{} mode::
* How to Use::
* Installation::
* Usage::
* Keybindings::
* Known Problems:: Known Problems. 
* Tips and Tricks::
* Explanation for functions::
* Customization::
* Contributing::

@detailmenu
--- The Detailed Node Listing ---

Keybindings

* Setting keybindings for individual functions::
* Setting the whole litex provided keybindings to a prefix key::
* Complete setup using use-package::

Tips and Tricks

* Using case sensitive symbols::
* Slime integration::
* Using Greek letters::

Using Greek letters

* By double escaping the backslash::
* Using Unicode:: Using Unicode. 
* Using conversion from their names::

Explanation for functions

* litex-format-region-last::
* litex-format-region::
* litex-eval-and-replace::
* litex-eval-and-insert::
* litex-sexp-to-latex-exp::
* litex-sexp-solve-all-steps::
* litex-increment-number::
* litex-exp-to-latex::
* litex-exp-in-latex-math::
* litex-sexp-solve-all-steps-equation::
* litex-sexp-solve-all-steps-eqnarray::

@end detailmenu
@end menu

@node Li@TeX{} mode
@chapter Li@TeX{} mode

This is a minor mode to convert valid elisp/lisp expressions to latex.

This is useful for emacs users because emacs allows lisp code to be directly evaluated inside any buffer, which means no need to have any code blocks. But since lisp expressions aren't popular we can't expect to put them in reports, so to overcome that I wrote this mode with the help of my friend @uref{https://gist.github.com/bpanthi977, Bibek Panthi}.

The beginning of this mode, and previous codes are here:
@itemize
@item
@uref{https://emacs.stackexchange.com/questions/70358/how-can-i-convert-a-lisp-expression-to-a-latex-math-expression/70360?noredirect=1#comment113158_70360, Stackexchange Question}
@item
@uref{https://gist.github.com/bpanthi977/4b8ece0eeff3bc05bb82275a23cbb56d, Bibek's gist}
@item
@uref{https://github.com/Atreyagaurav/emacs-modules, My previous calculation template mode and first few versions of Li@TeX{}}
@end itemize

Not only can it convert lisp expressions to latex, it can also, give intermediate solution steps. Perfect for doing homeworks (as that's what I made it for) :P

@node How to Use
@chapter How to Use

Here is a @uref{https://youtu.be/esEf63gSSPg, demo video} describing the features of Li@TeX{} mode.

For Text descriptions refer sections below for details on what each function does, and the meaning of custom variables.

You can also access it all from texinfo file provided with the package.

@node Installation
@chapter Installation

You can install it through melpa with @code{M-x package-install litex-mode <ret>}.

Or you can clone this github repo and load it using path.

Configuration section shows how you can add the load path using @code{use-package}.

@node Usage
@chapter Usage

Using @code{use-package} you can do:

@lisp
(use-package litex-mode
  ;; :load-path "/path/to/litex-mode/"
  :commands litex-mode
  :hook text-mode)
@end lisp

Please look through the Keybindings, Functions, Variables, Known problems and the Tips and Tricks to get 100% out of this package.

@node Keybindings
@chapter Keybindings

By default Li@TeX{}-mode doesn't provide any keybindings, but it does have a variable containing bindings for the interactive functions that you can use.

@menu
* Setting keybindings for individual functions::
* Setting the whole litex provided keybindings to a prefix key::
* Complete setup using use-package::
@end menu

@node Setting keybindings for individual functions
@section Setting keybindings for individual functions

You can use @code{local-set-key} to bind individual functions to a key binding.
@lisp
  (local-set-key (kbd "×") 'litex-insert-or-replace-x)
@end lisp

@node Setting the whole litex provided keybindings to a prefix key
@section Setting the whole litex provided keybindings to a prefix key

You can set a prefix key (@code{C-e} for me here) like in this example, which makes it so you can for example use @code{litex-format-region-last} using @code{C-e f} using the following in your config. In some cases you might have to unset key @code{C-e} because it's used to goto end of line, I'm replacing that because I don't use it (as @code{End} key does the same).
@lisp
  (local-set-key (kbd "C-e") litex-key-map)
@end lisp


Contents of litex-key-map are below.

@lisp
(define-key litex-key-map (kbd "F") 'litex-format-region)
(define-key litex-key-map (kbd "f") 'litex-format-region-last)
(define-key litex-key-map (kbd "E") 'litex-eval-and-replace)
(define-key litex-key-map (kbd "e") 'litex-eval-and-insert)
(define-key litex-key-map (kbd "s") 'litex-sexp-to-latex-exp)
(define-key litex-key-map (kbd "S") 'litex-sexp-solve-all-steps)
(define-key litex-key-map (kbd "+") 'litex-increment-number)
(define-key litex-key-map (kbd "l") 'litex-exp-to-latex)
(define-key litex-key-map (kbd "m") 'litex-exp-in-latex-math)
(define-key litex-key-map (kbd "A") 'litex-sexp-solve-all-steps-equation)
(define-key litex-key-map (kbd "a") 'litex-sexp-solve-all-steps-eqnarray)
@end lisp

@node Complete setup using use-package
@section Complete setup using use-package

This is the complete setup using use-package, if you installed from melpa. If you installed by cloning the repo, uncomment and provide the load path.
@lisp
(use-package litex-mode
  ;; :load-path "/path/to/litex-mode/"
  :commands litex-mode
  :hook text-mode
  :config
  (local-set-key (kbd "C-e") litex-key-map)
  (local-set-key (kbd "×") 'litex-insert-or-replace-x))
@end lisp

@node Known Problems
@chapter Known Problems:

elisp uses integer calculations so @code{(/ 1 2)} is evaluated to 0, be careful of such pitfalls. For now @code{(/ 1.0 2)} is evaluated as @code{0.5}, so I'd recommend using floats when you need floats.

This problem doesn't exist if you use slime integration.

@node Tips and Tricks
@chapter Tips and Tricks

@menu
* Using case sensitive symbols::
* Slime integration::
* Using Greek letters::
@end menu

@node Using case sensitive symbols
@section Using case sensitive symbols

Inside emacs the symbols are read without case sensitivity, so if you define and variable names @code{ABCD}, it'll replace the variable named @code{abcd}. To avoid that, specially if you have formula with both lowercase and uppercase symbols you can use this customization.

@lisp
  (setq readtable-case :preserve)
@end lisp

NOTE: Currently it only works for elisp, and not for slime integration, I'm searching for a solution with slime.

@node Slime integration
@section Slime integration

If you want to do the calculations in your favorite lisp dilect instead of doing it in elisp, or polluting the emacs environment with your variables, or mistakenly messing something up. You can start a slime process with @code{slime} and use that process to evaluate everything.

You Only need to set this configuration variable true:

@lisp
(setq litex-use-slime-for-eval t)
@end lisp

@node Using Greek letters
@section Using Greek letters

Someone who writes in @LaTeX{} will definitely want to include greek letters, so you can use greek letters multiple ways in Li@TeX{}.

@menu
* By double escaping the backslash::
* Using Unicode:: Using Unicode. 
* Using conversion from their names::
@end menu

@node By double escaping the backslash
@subsection By double escaping the backslash

You can use double escape to escape the backslash so you'll get the variable correct. For example: @code{(setq \\alpha 2)} ⇒ @code{\alpha = 2}

@node Using Unicode
@subsection Using Unicode:

You can input unicode greek letters like α,β,γ@dots{},Σ@dots{},Ω, and they'll be rendered fine by @LaTeX{}. For example: @code{(setq α 2)} ⇒ @code{α = 2}. Which is the default behavior.

If you want to use them to input, but still want to use @LaTeX{} equivalent command then you can set @code{litex-make-unicode-to-latex} to true, that'll convert the unicode to @LaTeX{} command. For example: @code{(setq α 2)} ⇒ @code{@{\alpha@} = 2}.

@lisp
(setq litex-make-unicode-to-latex t)
@end lisp

As for how to type unicode directly, you can use Compose key in Linux machines, and there is also @TeX{} input method in emacs that lets you do that. If you type @code{C-u C-\ TeX <RET>} for @TeX{} input method then when you type @code{\alpha} emacs will convert it into unicode @code{α}.

@node Using conversion from their names
@subsection Using conversion from their names

By default you can use variables names like @code{alpha} without having it any effect, for example: @code{(setq alpha 2)} ⇒ @code{alpha = 2} but if you set the variable @code{litex-make-name-to-latex-glyph} true then you can just convert normal greek character's names to @LaTeX{} symbols.
Like: @code{(setq alpha 2)} ⇒ @code{@{\alpha@} = 2}

@lisp
(setq litex-make-name-to-latex-glyph t)
@end lisp

@node Explanation for functions
@chapter Explanation for functions

@menu
* litex-format-region-last::
* litex-format-region::
* litex-eval-and-replace::
* litex-eval-and-insert::
* litex-sexp-to-latex-exp::
* litex-sexp-solve-all-steps::
* litex-increment-number::
* litex-exp-to-latex::
* litex-exp-in-latex-math::
* litex-sexp-solve-all-steps-equation::
* litex-sexp-solve-all-steps-eqnarray::
@end menu

@node litex-format-region-last
@section litex-format-region-last

Formats the selection based on variable @code{litex-format-string}.

For example: @code{2.3434343} ⇒ @code{2.34} (when @code{litex-format-string} is @code{.2f})

@node litex-format-region
@section litex-format-region

Same as @code{litex-format-region-last} but asks for the format, it also sets the @code{litex-format-string} variable.

@strong{NOTE}: Doesn't work well with multiple-cursors, so first use this once, then use the @code{litex-format-region-last} on the multiple cursors.

@node litex-eval-and-replace
@section litex-eval-and-replace

Evals the last sexp and replaces it with the evaluation value.

@node litex-eval-and-insert
@section litex-eval-and-insert

Evals the last sexp and inserts the evaluation value after that.

The value and sexp are separated by @code{litex-steps-join-string} which is "= " by default.

@node litex-sexp-to-latex-exp
@section litex-sexp-to-latex-exp

Converts valid lisp sexp to latex Expression:

For example: @code{(+ 2 3 (* 6 x))} ⇒ @code{2 + 3 + 6 x}

@node litex-sexp-solve-all-steps
@section litex-sexp-solve-all-steps

Solves lisp sexp steps by steps:

For example:
@code{(setq x 5)} ⇒ @code{x = 5} then @code{(setq y (+ 2 3 (* 6 x)))} ⇒ @code{y = (+ 2 3 (* 6 x))  = (+ 2 3 (* 6 5))  = (+ 2 3 30)  = 35}

@node litex-increment-number
@section litex-increment-number

Increments the number.

@code{some/url/to/chapter-2} ⇒  @code{some/url/to/chapter-3}

@node litex-exp-to-latex
@section litex-exp-to-latex

Converts exponential term to latex format.

@code{1.23e-34} ⇒ @code{1.23 \times 10^@{-34@}}

@node litex-exp-in-latex-math
@section litex-exp-in-latex-math

Encloses the selection in latex inline math.

@code{1.23e-34} ⇒ @code{\(1.23e-34\)}

@node litex-sexp-solve-all-steps-equation
@section litex-sexp-solve-all-steps-equation

Same as @code{litex-sexp-solve-all-steps} but puts them in equation environment.

For example: @code{(setq y (+ 2 3 (* 6 x)))} ⇒

@example
\begin@{equation@}
y= 2 + 3 + 6 x  = 2 + 3 + 6 \times 5  = 2 + 3 + 30 = 35
\end@{equation@}
@end example

@node litex-sexp-solve-all-steps-eqnarray
@section litex-sexp-solve-all-steps-eqnarray

Same as @code{litex-sexp-solve-all-steps} but puts them in eqnarray* environment.


For example: @code{(setq y (+ 2 3 (* 6 x)))} ⇒

@example
\begin@{eqnarray*@}
y &=& 2 + 3 + 6 x \\
 &=& 2 + 3 + 6 \times 5 \\
 &=& 2 + 3 + 30\\
 &=& 35
\end@{eqnarray*@}
@end example

@node Customization
@chapter Customization

There are lots of variables that define how each of these functions behave.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Variable Name
@tab Default Value
@tab What it does
@item litex-latex-functions
@tab '(sin cos tan)
@tab Lisp functions that have their own latex commands.
@item litex-make-hyphenated-to-subscript
@tab t
@tab Whether to make the hyphenated variables subscript or not.
@item litex-latex-maybe-enclose?
@tab nil
@tab Enclose latex converted to paran if needed.
@item litex-format-float-string
@tab "%.3f"
@tab Format string to be used by floats.
@item litex-format-float-upper-limit
@tab 1e4
@tab Upper limit of what number is formatted as float.
@item litex-format-float-lower-limit
@tab 1e-2
@tab Lower limit of what number is formatted as float.
@item litex-steps-join-string
@tab "= "
@tab String used for joining strings in steps of a solution.
@item litex-steps-end-string
@tab " "
@tab String used at the end of each strings in steps of a solution.
@item litex-math-inline-start
@tab "\\("
@tab Opening syntax for math inline environment.
@item litex-math-inline-end
@tab "\\)"
@tab Closing syntax for math inline environment.
@item litex-math-equation-start
@tab "\"
@tab Opening syntax for math equation environment.
@item litex-math-equation-end
@tab "\"
@tab Closing syntax for math equation environment.
@item litex-math-steps-equation-join-string
@tab "= "
@tab Value of `litex-steps-join-string' to be used in equation environment.
@item litex-math-steps-equation-end-string
@tab " "
@tab Value of `litex-steps-end-string' to be used in equation environment.
@item litex-math-eqnarray-start
@tab "\"
@tab Opening syntax for math eqnarray environment.
@item litex-math-eqnarray-end
@tab "\"
@tab Closing syntax for math eqnarray environment.
@item litex-math-steps-eqnarray-join-string
@tab " &=& "
@tab Value of `litex-steps-join-string' to be used in eqnarray environment.
@item litex-math-steps-eqnarray-end-string
@tab "\\\\"
@tab Value of `litex-steps-end-string' to be used in eqnarray environment.
@item litex-math-align-start
@tab "\"
@tab Opening syntax for math align environment.
@item litex-math-align-end
@tab "\"
@tab Closing syntax for math align environment.
@item litex-math-steps-align-join-string
@tab "& = "
@tab Value of `litex-steps-join-string' to be used in align environment.
@item litex-math-steps-align-end-string
@tab "\\\\"
@tab Value of `litex-steps-end-string' to be used in align environment.
@item litex-make-unicode-to-latex
@tab nil
@tab Convert unicode to @LaTeX{} equivalent (eg. α -> α)
@item litex-make-name-to-latex-glyph
@tab nil
@tab Convert variables with the same name as a glyph to a @LaTeX{} glyph (eg. alpha -> α).
@item litex-use-slime-for-eval
@tab nil
@tab Whether to use slime process for evalulation or not. You need to start slime yourself.
@item litex-greek-unicode-latex-alist
@tab 
@tab Alist of greek unicode symbols and their @LaTeX{} counterparts.
@end multitable

@node Contributing
@chapter Contributing

Since this package is new, I'd appreciate contributions on few things:

@itemize
@item
Finding bugs and reporting them in github issues.
@item
There are many tests to be written for the functions.
@item
Many functions that might have special syntax in @LaTeX{} yet to be written. For example @code{1+}, @code{defun} were added later (it only started with 4 operators), similar could be done for many more.
@item
Fixing some glitches with the current functions.
@item
Maybe some symbolic calculations using @code{calc-eval} if it has variables that are not yet defined.
@end itemize

@bye
